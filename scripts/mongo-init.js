// Script de inicializa√ß√£o do MongoDB para o Sistema Financeiro
// Este script √© executado automaticamente durante a cria√ß√£o do container

print("üöÄ Iniciando configura√ß√£o do banco de dados 'financeiro'...");

// Conecta ao banco de dados
db = db.getSiblingDB('financeiro');

// Cria usu√°rio espec√≠fico para a aplica√ß√£o
db.createUser({
  user: 'financeiro_app',
  pwd: 'financeiro123',
  roles: [
    {
      role: 'readWrite',
      db: 'financeiro'
    }
  ]
});

// Cria cole√ß√µes iniciais com valida√ß√£o
print("üìä Criando cole√ß√µes com valida√ß√£o...");

// Cole√ß√£o de usu√°rios
db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "email", "password_hash"],
      properties: {
        name: { bsonType: "string" },
        email: { bsonType: "string" },
        password_hash: { bsonType: "string" },
        created_at: { bsonType: "date" },
        updated_at: { bsonType: "date" },
        is_active: { bsonType: "bool" }
      }
    }
  }
});

// Cole√ß√£o de contas
db.createCollection("accounts", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["user_id", "name", "account_type", "balance"],
      properties: {
        user_id: { bsonType: "string" },
        name: { bsonType: "string" },
        account_type: { bsonType: "string" },
        balance: { bsonType: "decimal" },
        is_primary: { bsonType: "bool" },
        created_at: { bsonType: "date" },
        updated_at: { bsonType: "date" },
        is_active: { bsonType: "bool" }
      }
    }
  }
});

// Cole√ß√£o de categorias
db.createCollection("categories", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["user_id", "name", "category_type"],
      properties: {
        user_id: { bsonType: "string" },
        name: { bsonType: "string" },
        category_type: { bsonType: "string" },
        color: { bsonType: "string" },
        icon: { bsonType: "string" },
        is_system: { bsonType: "bool" },
        created_at: { bsonType: "date" },
        updated_at: { bsonType: "date" },
        is_active: { bsonType: "bool" }
      }
    }
  }
});

// Cole√ß√£o de transa√ß√µes
db.createCollection("transactions", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["user_id", "account_id", "category_id", "type", "amount", "date"],
      properties: {
        user_id: { bsonType: "string" },
        account_id: { bsonType: "string" },
        category_id: { bsonType: "string" },
        type: { bsonType: "string" },
        amount: { bsonType: "decimal" },
        description: { bsonType: "string" },
        date: { bsonType: "date" },
        created_at: { bsonType: "date" },
        updated_at: { bsonType: "date" }
      }
    }
  }
});

// Cria √≠ndices para performance
print("üîç Criando √≠ndices para performance...");

// √çndices para usu√°rios
db.users.createIndex({ "email": 1 }, { unique: true });
db.users.createIndex({ "is_active": 1 });

// √çndices para contas
db.accounts.createIndex({ "user_id": 1 });
db.accounts.createIndex({ "user_id": 1, "is_primary": 1 });
db.accounts.createIndex({ "is_active": 1 });

// √çndices para categorias
db.categories.createIndex({ "user_id": 1 });
db.categories.createIndex({ "user_id": 1, "category_type": 1 });
db.categories.createIndex({ "is_system": 1 });

// √çndices para transa√ß√µes
db.transactions.createIndex({ "user_id": 1 });
db.transactions.createIndex({ "account_id": 1 });
db.transactions.createIndex({ "category_id": 1 });
db.transactions.createIndex({ "user_id": 1, "date": -1 });
db.transactions.createIndex({ "type": 1 });
db.transactions.createIndex({ "date": -1 });

print("‚úÖ Configura√ß√£o do banco de dados conclu√≠da com sucesso!");
print("üìã Resumo:");
print("   - Usu√°rio da aplica√ß√£o: financeiro_app");
print("   - Banco de dados: financeiro");
print("   - Cole√ß√µes criadas: users, accounts, categories, transactions");
print("   - √çndices otimizados criados");
